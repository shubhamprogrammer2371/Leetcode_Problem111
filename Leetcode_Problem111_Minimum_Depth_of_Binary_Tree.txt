/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
void depthTree(struct TreeNode* root , int* depth , int* current_depth)
{
    if(!root)
        return ;
    if(!root->left && !root->right)
    {
        if((*current_depth) < (*depth))
            *depth = *current_depth ;
        (*current_depth)--;
        return ;
    }
    if(root->left)
        (*current_depth)++;
    depthTree(root->left,depth,current_depth);
    if(root->right)
        (*current_depth)++;
    depthTree(root->right,depth,current_depth);
    (*current_depth)--;
    return ;
}

int minDepth(struct TreeNode* root){
    if(!root)
        return 0;
    int depth = 10000,current_depth = 1;
    depthTree(root,&depth,&current_depth);
    return depth;
}


--------------------------------------------------------------------------------------------------------------------------



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int minDepth(struct TreeNode* root){
    if(!root)
        return 0;
    int minLeft = minDepth(root->left);
    int minRight = minDepth(root->right);
    if ((minLeft==0) ^ (minRight==0)) // condition for skewed trees
        return (minLeft > minRight ? minLeft : minRight )+1 ;
    return (minLeft < minRight ? minLeft : minRight)+1 ; // condition for normal trees
}